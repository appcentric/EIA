package model;

import java.io.PrintWriter;
import java.io.StringWriter;

import java.sql.Timestamp;
import java.sql.CallableStatement;

import java.util.Date;

import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Types;

import java.util.Calendar;
import java.util.GregorianCalendar;


import oracle.jbo.ViewObject;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.server.ViewObjectImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Dec 31 12:51:25 IST 2013
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class AppModuleImpl extends ApplicationModuleImpl {
    /**
     * This is the default constructor (do not remove).
     */
    public AppModuleImpl() {


    }


    /**
     * Container's getter for AuditStatusView1.
     * @return AuditStatusView1
     */
    public ViewObjectImpl getAuditStatusView1() {
        return (ViewObjectImpl)findViewObject("AuditStatusView1");
    }

    /**
     * Container's getter for IntegratingSystemView1.
     * @return IntegratingSystemView1
     */
    public ViewObjectImpl getIntegratingSystemView1() {
        return (ViewObjectImpl)findViewObject("IntegratingSystemView1");
    }

    /**
     * Container's getter for AuditLogView2.
     * @return AuditLogView2
     */
    public ViewObjectImpl getAuditLogView2() {
        return (ViewObjectImpl)findViewObject("AuditLogView2");
    }

    /**
     * Container's getter for AuditStepLogView2.
     * @return AuditStepLogView2
     */
    public ViewObjectImpl getAuditStepLogView2() {
        return (ViewObjectImpl)findViewObject("AuditStepLogView2");
    }


    /**
     * Container's getter for AuditLogAuditStepLogFkLink.
     * @return AuditLogAuditStepLogFkLink
     */
    public ViewLinkImpl getAuditLogAuditStepLogFkLink() {
        return (ViewLinkImpl)findViewLink("AuditLogAuditStepLogFkLink");
    }


    public String callStoreprocedurePurgeScript(Date StartTime, Date EndTime,
                                                Integer TransactionStatus,
                                                Integer Days) {
        CallableStatement cs = null;
        try {

            cs =
 getDBTransaction().createCallableStatement("begin    XXNUC_COMM_AUDIT_LOG_PKG.PURGE_audit_log(?,?,?) ;end;",
                                            0);


            if (Days != null) {

                Calendar cal = new GregorianCalendar();
                cal.add(Calendar.DAY_OF_MONTH, -Days);
                //   Date sevenDaysAgo =
                StartTime = cal.getTime();
                EndTime = new Date();
                TransactionStatus = 0;
            }

            cs.setObject(1, new java.sql.Timestamp(StartTime.getTime()));
            cs.setObject(2, new java.sql.Timestamp(EndTime.getTime()));
            if (TransactionStatus == null) {
                TransactionStatus = 0;
            }
            cs.setInt(3, TransactionStatus);
            cs.executeUpdate();
            return "Success Audit Log purged from : " +
                (new java.sql.Timestamp(StartTime.getTime())) + " to : " +
                (new java.sql.Timestamp(EndTime.getTime()));

        } catch (Exception e) {
            StringWriter sw = new StringWriter();
            PrintWriter pw = new PrintWriter(sw);
            e.printStackTrace(pw);
            return e.getMessage() + " : " + sw.toString();


            //throw new JboException(e);
        }
    }


    public String PurgeTimeStatus(Date StartTime, Date EndTime,
                                  Integer TransactionStatus) {
        CallableStatement cs = null;
        try {

            if (StartTime == null) {
                return "Please provide Start Date";
            }
            
            if (EndTime == null) {
                return "Please provide End Date";
            }


            cs =
 getDBTransaction().createCallableStatement("begin    XXNUC_COMM_AUDIT_LOG_PKG.PURGE_audit_log(?,?,?,?) ;end;",
                                            0);


            cs.setObject(1, new java.sql.Timestamp(StartTime.getTime()));
            cs.setObject(2, new java.sql.Timestamp(EndTime.getTime()));
            if (TransactionStatus == null) {
                TransactionStatus = 0;
            }
            cs.setInt(3, TransactionStatus);
            cs.registerOutParameter(4, java.sql.Types.INTEGER); 
            cs.executeUpdate();
            int countDeleted = cs.getInt(4);
            
            return "Success : " + countDeleted+ " record purged from : " +
                (new java.sql.Timestamp(StartTime.getTime())) + " to : " +
                (new java.sql.Timestamp(EndTime.getTime()));

        } catch (Exception e) {
            StringWriter sw = new StringWriter();
            PrintWriter pw = new PrintWriter(sw);
            e.printStackTrace(pw);
            return e.getMessage() + " : " + sw.toString();


            //throw new JboException(e);
        }
    }


    public String PurgeDays(Integer Days) {
        CallableStatement cs = null;
        try {


            if (Days == null) {
                return "Please provide days (1 ..100)";
            }
            

            Date StartTime;
            Date EndTime;
            Integer TransactionStatus;
            cs =
 getDBTransaction().createCallableStatement("begin    XXNUC_COMM_AUDIT_LOG_PKG.PURGE_audit_log(?,?,?,?) ;end;",
                                            0);


           /*  Calendar cal = new GregorianCalendar();
            cal.add(Calendar.DAY_OF_MONTH, -Days);
           StartTime = cal.getTime();
            EndTime = new Date();*/
           
           
           Calendar calStart = new GregorianCalendar();
                       calStart.add(Calendar.DAY_OF_MONTH, -Days-10*365);
                      StartTime = calStart.getTime();
            
            
            Calendar calEnd = new GregorianCalendar();
                        calEnd.add(Calendar.DAY_OF_MONTH, -Days);
                       EndTime = calEnd.getTime();
            
            
            TransactionStatus = 0;


            cs.setObject(1, new java.sql.Timestamp(StartTime.getTime()));
            cs.setObject(2, new java.sql.Timestamp(EndTime.getTime()));
            cs.setInt(3, TransactionStatus);
           cs.registerOutParameter(4, java.sql.Types.INTEGER); 
            cs.executeUpdate();
            int countDeleted = cs.getInt(4);
            
         /*   return "Success : "+ countDeleted + " record purged from : " +
                (new java.sql.Timestamp(StartTime.getTime())) + " to : " +
                (new java.sql.Timestamp(EndTime.getTime()));*/
            
         return "Success : "+ countDeleted + " record purged before : " +
             (new java.sql.Timestamp(EndTime.getTime()));

        } catch (Exception e) {
            StringWriter sw = new StringWriter();
            PrintWriter pw = new PrintWriter(sw);
            e.printStackTrace(pw);
            return e.getMessage() + " : " + sw.toString();


            //throw new JboException(e);
        }
    }

    /**
     * Container's getter for TableSizeLOV1.
     * @return TableSizeLOV1
     */
    public ViewObjectImpl getAuditLogTableSizeLOV() {
        return (ViewObjectImpl)findViewObject("AuditLogTableSizeLOV");
    }


    /**
     * Container's getter for TableSizeLOV1.
     * @return TableSizeLOV1
     */
    public ViewObjectImpl getAuditStepLogTableSizeLOV() {
        return (ViewObjectImpl)findViewObject("AuditStepLogTableSizeLOV");
    }

    /**
     * Container's getter for AuditLogtypeView1.
     * @return AuditLogtypeView1
     */
    public ViewObjectImpl getAuditLogtypeView1() {
        return (ViewObjectImpl)findViewObject("AuditLogtypeView1");
    }

    /**
     * Container's getter for GlobalSettingView1.
     * @return GlobalSettingView1
     */
    public ViewObjectImpl getGlobalSettingView1() {
        return (ViewObjectImpl)findViewObject("GlobalSettingView1");
    }

    /**
     * Container's getter for TransactionNotificationView1.
     * @return TransactionNotificationView1
     */
    public ViewObjectImpl getTransactionNotificationView1() {
        return (ViewObjectImpl)findViewObject("TransactionNotificationView1");
    }

    /**
     * Container's getter for EmailGroupView1.
     * @return EmailGroupView1
     */
    public ViewObjectImpl getEmailGroupView1() {
        return (ViewObjectImpl)findViewObject("EmailGroupView1");
    }

    /**
     * Container's getter for EmailNotificationView1.
     * @return EmailNotificationView1
     */
    public ViewObjectImpl getEmailNotificationView1() {
        return (ViewObjectImpl)findViewObject("EmailNotificationView1");
    }

    /**
     * Container's getter for TransactionNotificationView2.
     * @return TransactionNotificationView2
     */
    public ViewObjectImpl getTransactionNotificationView2() {
        return (ViewObjectImpl)findViewObject("TransactionNotificationView2");
    }

    /**
     * Container's getter for EmailGroupView2.
     * @return EmailGroupView2
     */
    public ViewObjectImpl getEmailGroupView2() {
        return (ViewObjectImpl)findViewObject("EmailGroupView2");
    }


    /**
     * Container's getter for EnabledDisabled1.
     * @return EnabledDisabled1
     */
    public ViewObjectImpl getEnabledDisabled1() {
        return (ViewObjectImpl)findViewObject("EnabledDisabled1");
    }

    /**
     * Container's getter for YesNo1.
     * @return YesNo1
     */
    public ViewObjectImpl getYesNo1() {
        return (ViewObjectImpl)findViewObject("YesNo1");
    }

    /**
     * Container's getter for EmailNotificationView2.
     * @return EmailNotificationView2
     */
    public ViewObjectImpl getEmailNotificationView2() {
        return (ViewObjectImpl)findViewObject("EmailNotificationView2");
    }

    /**
     * Container's getter for EmailNotificationView3.
     * @return EmailNotificationView3
     */
    public ViewObjectImpl getEmailNotificationView3() {
        return (ViewObjectImpl)findViewObject("EmailNotificationView3");
    }

    /**
     * Container's getter for FYIActor1.
     * @return FYIActor1
     */
    public ViewObjectImpl getFYIActor1() {
        return (ViewObjectImpl)findViewObject("FYIActor1");
    }

    /**
     * Container's getter for EmailGroupList1.
     * @return EmailGroupList1
     */
    public ViewObjectImpl getEmailGroupList1() {
        return (ViewObjectImpl)findViewObject("EmailGroupList1");
    }

    /**
     * Container's getter for TransactionStatusLOV1.
     * @return TransactionStatusLOV1
     */
    public ViewObjectImpl getTransactionStatusLOV1() {
        return (ViewObjectImpl)findViewObject("TransactionStatusLOV1");
    }


    /**
     * Container's getter for GroupSettingView1.
     * @return GroupSettingView1
     */
    public ViewObjectImpl getGroupSettingView1() {
        return (ViewObjectImpl)findViewObject("GroupSettingView1");
    }

    /**
     * Container's getter for XxnucCommMsgs1View1.
     * @return XxnucCommMsgs1View1
     */
    public ViewObjectImpl getXxnucCommMsgs1View1() {
        return (ViewObjectImpl) findViewObject("XxnucCommMsgs1View1");
    }

    /**
     * Container's getter for XxnucCommMsgs1View1_1.
     * @return XxnucCommMsgs1View1_1
     */
    public ViewObjectImpl getXxnucCommMsgs1View1_1() {
        return (ViewObjectImpl) findViewObject("XxnucCommMsgs1View1_1");
    }
}
