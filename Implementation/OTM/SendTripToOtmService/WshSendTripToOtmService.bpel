<!--
  ///////////////////////////////////////////////////////////////////////////////////////////// 
  // Oracle JDeveloper BPEL Designer 
  // 
  // Created: Tue Feb 07 17:04:54 PST 2006
  // Author:  nltan
  // Purpose: Synchronous BPEL Process
  ///////////////////////////////////////////////////////////////////////////////////////////// 
-->
<process name="WshSendTripToOtmService" targetNamespace="http://xmlns.oracle.com/apps/wsh/outbound/txn/WshSendTripToOtmService" xmlns="http://schemas.xmlsoap.org/ws/2003/03/business-process/" xmlns:bpws="http://schemas.xmlsoap.org/ws/2003/03/business-process/" xmlns:xp20="http://www.oracle.com/XSL/Transform/java/oracle.tip.pc.services.functions.Xpath20" xmlns:ns4="http://xmlns.oracle.com/pcbpel/adapter/db/APPS/WSH_OTM_OUTBOUND/GET_TRIP_OBJECTS/" xmlns:ldap="http://schemas.oracle.com/xpath/extension/ldap" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:ns5="http://xmlns.oracle.com/apps/otm" xmlns:client="http://xmlns.oracle.com/apps/wsh/outbound/txn/WshSendTripToOtmService" xmlns:ora="http://schemas.oracle.com/xpath/extension" xmlns:ns1="http://xmlns.oracle.com/apps/wsh/outbound/util/WshOtmGlobalOutbound" xmlns:ns3="http://www.w3.org/2001/XMLSchema" xmlns:ns2="http://xmlns.oracle.com/pcbpel/adapter/db/TripInformation/" xmlns:bpelx="http://schemas.oracle.com/bpel/extension" xmlns:orcl="http://www.oracle.com/XSL/Transform/java/oracle.tip.pc.services.functions.ExtFunc" xmlns:dvm="http://www.oracle.com/XSL/Transform/java/oracle.tip.dvm.LookupValue"
         xmlns:ns6="client:" xmlns:bpel2="http://docs.oasis-open.org/wsbpel/2.0/process/executable"><!-- ================================================================= --><!-- PARTNERLINKS                                                      --><!-- List of services participating in this BPEL process               --><!-- ================================================================= -->
  <bpelx:annotation>
    <bpelx:analysis>
      <bpelx:property name="wsdlFile">
        <![CDATA[WshSendTripToOtmService.wsdl]]>
      </bpelx:property>
    </bpelx:analysis>
  </bpelx:annotation>
  <partnerLinks><!-- 
    The 'client' role represents the requester of this service. It is 
    used for callback. The location and correlation information associated
    with the client role are automatically set using WS-Addressing.
    -->
    <partnerLink name="client" partnerLinkType="client:WshSendTripToOtmService" myRole="WshSendTripToOtmServiceProvider"/>
    <partnerLink name="TripInformation" partnerRole="TripInformation_role" partnerLinkType="ns2:TripInformation_plt"/>
  </partnerLinks><!-- ================================================================= --><!-- VARIABLES                                                         --><!-- List of messages and XML documents used within this BPEL process  --><!-- ================================================================= -->
  <variables><!-- Reference to the message passed as input during initiation -->
    <variable name="inputVariable" messageType="client:WshSendTripToOtmServiceRequestMessage"/><!--  
    Reference to the message that will be returned to the requester
    -->
    <variable name="outputVariable" messageType="client:WshSendTripToOtmServiceResponseMessage"/>
    <variable name="p_InvokeTripInformationInput" messageType="ns2:args_in_msg"/>
    <variable name="p_InvokeTripInformationOutput" messageType="ns2:args_out_msg"/>
    <variable name="faultVariable" messageType="client:WshSendTripToOtmServiceFaultMessage"/>
  </variables>
  <faultHandlers>
    <catchAll>
      <sequence name="Seq_CheckRetStatus">
        <switch name="checkRetStatus">
          <case condition="string-length(string(bpws:getVariableData('p_InvokeTripInformationOutput','OutputParameters','/ns4:OutputParameters/X_RETURN_STATUS'))) > 0.0">
            <bpelx:annotation>
              <bpelx:pattern>noReturnStatus
              </bpelx:pattern>
            </bpelx:annotation>
            <assign name="assignRetStatus">
              <copy>
                <from expression="'U'"/>
                <to variable="outputVariable" part="payload" query="/client:WshSendTripToOtmServiceProcessResponse/client:result/ns1:returnStatus"/>
              </copy>
            </assign>
          </case>
          <otherwise>
            <empty name="hasRetStatus"/>
          </otherwise>
        </switch>
        <assign name="assignTripError">
          <copy>
            <from variable="inputVariable" part="payload" query="/client:WshSendTripToOtmServiceProcessRequest/client:input/ns1:entityIdList"/>
            <to variable="outputVariable" part="payload" query="/client:WshSendTripToOtmServiceProcessResponse/client:result/ns1:errorIdList"/>
          </copy>
        </assign>
      </sequence>
    </catchAll>
  </faultHandlers><!-- ================================================================= --><!-- ORCHESTRATION LOGIC                                               --><!-- Set of activities coordinating the flow of messages across the    --><!-- services integrated within this business process                  --><!-- ================================================================= -->
  <sequence name="main"><!-- Receive input from requestor. 
    Note: This maps to operation defined in WshSendTripToOtmService.wsdl
    -->
    <receive name="receiveInput" partnerLink="client" portType="client:WshSendTripToOtmService" operation="process" variable="inputVariable" createInstance="yes"/><!-- Generate reply to synchronous request -->
    <assign name="transformInputToTrip">
      <bpelx:annotation>
        <bpelx:pattern>transformation
        </bpelx:pattern>
      </bpelx:annotation>
      <copy>
        <from expression="ora:processXSLT('xsl/WshXFormOutTxnInToTrip.xsl',bpws:getVariableData('inputVariable','payload'))"/>
        <to variable="p_InvokeTripInformationInput" part="InputParameters"/>
      </copy>
    </assign>
    <invoke name="invokeTripInformation" partnerLink="TripInformation" portType="ns2:TripInformation_ptt" operation="TripInformation" inputVariable="p_InvokeTripInformationInput" outputVariable="p_InvokeTripInformationOutput"/>
    <switch name="checkReturnStatus">
      <case condition="upper-case(string(bpws:getVariableData('p_InvokeTripInformationOutput','OutputParameters','/ns4:OutputParameters/X_RETURN_STATUS')))='S'">
        <bpelx:annotation>
          <bpelx:pattern>getTripInfo_Success
          </bpelx:pattern>
        </bpelx:annotation>
        <sequence name="Seq_mapTripData">
          <assign name="transformTripToActual">
            <bpelx:annotation>
              <bpelx:pattern>transformation
              </bpelx:pattern>
            </bpelx:annotation>
            <copy>
              <from expression="ora:doXSLTransformForDoc('xsl/WshXFormOutTxnTripToActual.xsl', $p_InvokeTripInformationOutput.OutputParameters)"/>
              <to variable="outputVariable" part="payload"/>
            </copy>
          </assign>
        </sequence>
      </case>
      <otherwise>
        <sequence name="Seq_ThrowError">
          <throw name="throwTripError" faultName="client:faultError" faultVariable="faultVariable"/>
        </sequence>
      </otherwise>
    </switch>
    <reply name="replyOutput" partnerLink="client" portType="client:WshSendTripToOtmService" operation="process" variable="outputVariable"/>
  </sequence>
</process>
