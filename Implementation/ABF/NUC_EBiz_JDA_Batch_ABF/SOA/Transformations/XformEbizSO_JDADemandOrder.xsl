<?xml version="1.0" encoding="UTF-8" ?>
<xsl:stylesheet version="2.0"
                xmlns:mhdr="http://www.oracle.com/XSL/Transform/java/oracle.tip.mediator.service.common.functions.MediatorExtnFunction"
                xmlns:oraext="http://www.oracle.com/XSL/Transform/java/oracle.tip.pc.services.functions.ExtFunc"
                xmlns:xsd="http://www.w3.org/2001/XMLSchema"
                xmlns:xp20="http://www.oracle.com/XSL/Transform/java/oracle.tip.pc.services.functions.Xpath20"
                xmlns:xref="http://www.oracle.com/XSL/Transform/java/oracle.tip.xref.xpath.XRefXPathFunctions"
                xmlns:socket="http://www.oracle.com/XSL/Transform/java/oracle.tip.adapter.socket.ProtocolTranslator"
                xmlns:oracle-xsl-mapper="http://www.oracle.com/xsl/mapper/schemas"
                xmlns:dvm="http://www.oracle.com/XSL/Transform/java/oracle.tip.dvm.LookupValue"
                xmlns:oraxsl="http://www.oracle.com/XSL/Transform/java"
                xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                xmlns:ns0="http://xmlns.oracle.com/pcbpel/adapter/db/top/DB_Extract_EBIZ_Batch_Details"
                xmlns:tns="http://xmlns.oracle.com/NUC_Ebiz_JDA_Batch_ABF/SO/1.0"
                xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                exclude-result-prefixes="xsd oracle-xsl-mapper xsi xsl ns0 tns mhdr oraext xp20 xref socket dvm oraxsl"
                xmlns:plt="http://schemas.xmlsoap.org/ws/2003/05/partner-link/"
                xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/"
                xmlns:ns1="http://xmlns.oracle.com/pcbpel/adapter/db/1.1/NUC_EBiz_JDA_Batch_ABF/DB_Extract_EBIZ_Batch_Details"
                xmlns:jca="http://xmlns.oracle.com/pcbpel/wsdl/jca/"
                xmlns:ns2="http://xmlns.oracle.com/pcbpel/adapter/ftp/1.1/NUC_EBiz_JDA_Batch_ABF/FTP_WriteSalesOrderRecord"
                xmlns:FILEAPP="http://xmlns.oracle.com/pcbpel/adapter/file/"
                xmlns:utl="http://www.oracle.com/XSL/Transform/java/com.eia.soa.util.Configuration">
  <oracle-xsl-mapper:schema>
    <!--SPECIFICATION OF MAP SOURCES AND TARGETS, DO NOT MODIFY.-->
    <oracle-xsl-mapper:mapSources>
      <oracle-xsl-mapper:source type="WSDL">
        <oracle-xsl-mapper:schema location="../WSDLs/DB_Extract_EBIZ_Batch_Details.wsdl"/>
        <oracle-xsl-mapper:rootElement name="XxnucGmeJdaBatchExtVCollection"
                                       namespace="http://xmlns.oracle.com/pcbpel/adapter/db/top/DB_Extract_EBIZ_Batch_Details"/>
      </oracle-xsl-mapper:source>
    </oracle-xsl-mapper:mapSources>
    <oracle-xsl-mapper:mapTargets>
      <oracle-xsl-mapper:target type="WSDL">
        <oracle-xsl-mapper:schema location="../WSDLs/FTP_WriteSalesOrderRecord.wsdl"/>
        <oracle-xsl-mapper:rootElement name="SalesOrderList"
                                       namespace="http://xmlns.oracle.com/NUC_Ebiz_JDA_Batch_ABF/SO/1.0"/>
      </oracle-xsl-mapper:target>
    </oracle-xsl-mapper:mapTargets>
    <!--GENERATED BY ORACLE XSL MAPPER 12.1.3.0.0(XSLT Build 140529.0700.0211) AT [TUE MAY 02 16:16:27 CDT 2017].-->
  </oracle-xsl-mapper:schema>
  <!--User Editing allowed BELOW this line - DO NOT DELETE THIS LINE-->
  <xsl:template match="/">
    <tns:SalesOrderList>
      <tns:SalesOrderHeader>
        <tns:allow_inventory_consumption/>
        <tns:make_to_stock_p/>
        <tns:acm_flag/>
        <tns:category/>
        <tns:crsd/>
        <tns:crsd_format/>
        <tns:customer/>
        <tns:demand_location/>
        <tns:demand_type_priority/>
        <tns:do_not_schedule/>
        <tns:part_quantity/>
        <tns:part_quantity_uom/>
        <tns:part_number/>
        <tns:demand_order_id/>
        <tns:priority/>
        <tns:promise_date/>
        <tns:promise_date_format/>
        <tns:replan_order_p/>
        <tns:sales_rep/>
        <tns:sales_due_date/>
        <tns:sales_due_date_format/>
      </tns:SalesOrderHeader>
      <xsl:for-each-group select="/ns0:XxnucGmeJdaBatchExtVCollection/ns0:XxnucGmeJdaBatchExtV/ns0:xxnucGmeJdaSoExtVCollection/ns0:XxnucGmeJdaSoExtV"
                          group-by="ns0:demandOrderId">
        <tns:SalesOrder>
          <tns:allow_inventory_consumption/>
          <tns:make_to_stock_p/>
          <tns:acm_flag/>
          <tns:category>
            <xsl:value-of select="ns0:category"/>
          </tns:category>
          <tns:crsd>
            <xsl:value-of select="ns0:crsd"/>
          </tns:crsd>
          <tns:crsd_format>
            <xsl:value-of select="ns0:crsdFormat"/>
          </tns:crsd_format>
          <tns:customer>
            <xsl:choose>
              <xsl:when test="contains (ns0:customer, &quot; &amp; &quot; )">
               <xsl:call-template name="string-replace-all">
              <xsl:with-param name="text" select="ns0:customer"/>
              <xsl:with-param name="replace" select='"&amp;"'/>
              <xsl:with-param name="by" select='"AND"'/>
                </xsl:call-template>
              </xsl:when>
              <xsl:when test="contains (ns0:customer, &quot;&amp;&quot; )">
               <xsl:call-template name="string-replace-all">
              <xsl:with-param name="text" select="ns0:customer"/>
              <xsl:with-param name="replace" select='"&amp;"'/>
              <xsl:with-param name="by" select='" AND "'/>
                </xsl:call-template>
              </xsl:when>
              <xsl:otherwise>
                <xsl:call-template name="string-replace-all">
                  <xsl:with-param name="text" select="ns0:customer"/>
                  <xsl:with-param name="replace" select='"&amp;"'/>
                  <xsl:with-param name="by" select='" AND "'/>
                </xsl:call-template>
              </xsl:otherwise>
            </xsl:choose>
          </tns:customer>
          <tns:demand_location>
            <xsl:value-of select="ns0:demandLocation"/>
          </tns:demand_location>
          <tns:demand_type_priority>
            <xsl:value-of select="ns0:priority"/>
          </tns:demand_type_priority>
          <tns:do_not_schedule>
            <xsl:value-of select="ns0:doNotSchedule"/>
          </tns:do_not_schedule>
          <tns:part_quantity>
            <xsl:value-of select="ns0:partQuantity"/>
          </tns:part_quantity>
          <tns:part_quantity_uom>
            <xsl:value-of select="ns0:partQuantityUom"/>
          </tns:part_quantity_uom>
          <tns:part_number>
            <xsl:value-of select="ns0:partNumber"/>
          </tns:part_number>
          <tns:demand_order_id>
            <xsl:value-of select="ns0:demandOrderId"/>
          </tns:demand_order_id>
          <tns:priority>
            <xsl:value-of select="ns0:priority"/>
          </tns:priority>
          <tns:promise_date>
            <xsl:value-of select="ns0:promiseDate"/>
          </tns:promise_date>
          <tns:promise_date_format>
            <xsl:value-of select="ns0:promiseDateFormat"/>
          </tns:promise_date_format>
          <tns:replan_order_p>
            <xsl:value-of select="ns0:replanOrderP"/>
          </tns:replan_order_p>
          <tns:sales_rep>
            <xsl:value-of select="ns0:salesRep"/>
          </tns:sales_rep>
          <tns:sales_due_date>
            <xsl:value-of select="ns0:salesDueDate"/>
          </tns:sales_due_date>
          <tns:sales_due_date_format>
            <xsl:value-of select="ns0:salesDueDateFormat"/>
          </tns:sales_due_date_format>
        </tns:SalesOrder>
      </xsl:for-each-group>
    </tns:SalesOrderList>
  </xsl:template>
  
  
  
  <xsl:template name="string-replace-all">
    <xsl:param name="text"/>
    <xsl:param name="replace"/>
    <xsl:param name="by"/>
    <xsl:choose>
      <xsl:when test="contains($text, $replace)">
        <xsl:value-of select="substring-before($text,$replace)"/>
        <xsl:value-of select="$by"/>
        <xsl:call-template name="string-replace-all">
          <xsl:with-param name="text" select="substring-after($text,$replace)"/>
          <xsl:with-param name="replace" select="$replace"/>
          <xsl:with-param name="by" select="$by"/>
        </xsl:call-template>
      </xsl:when>
      <xsl:otherwise>
        <xsl:value-of select="$text"/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>
</xsl:stylesheet>
