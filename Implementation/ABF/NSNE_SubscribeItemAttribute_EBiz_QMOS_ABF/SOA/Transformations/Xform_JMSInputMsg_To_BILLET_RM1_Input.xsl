<?xml version="1.0" encoding="UTF-8" ?>
<xsl:stylesheet exclude-result-prefixes="xsi oracle-xsl-mapper xsl xsd ns1 ns0 tns xp20 oraxsl mhdr oraext dvm xref socket" version="1.0" xmlns:dvm="http://www.oracle.com/XSL/Transform/java/oracle.tip.dvm.LookupValue" xmlns:jca="http://xmlns.oracle.com/pcbpel/wsdl/jca/" xmlns:mhdr="http://www.oracle.com/XSL/Transform/java/oracle.tip.mediator.service.common.functions.MediatorExtnFunction" xmlns:ns0="http://nucor.eia.com/AO/Ebiz/D2S/ItemAttributeAM/1.0" xmlns:ns1="http://schemas.oracle.com/service/bpel/common" xmlns:ns10="http://xmlns.oracle.com/pcbpel/adapter/db/I114/NSNE_SubscribeItemAttribute_EBiz_QMOS_ABF/DB_Insert_API_PRODUCT_CODE" xmlns:ns2="http://xmlns.oracle.com/pcbpel/adapter/jms/I114/NSNE_SubscribeItemAttribute_EBiz_QMOS_ABF/JMS_DEQ_NextGenDistributedTopic" xmlns:ns3="http://nucor.eia.com/common" xmlns:ns4="http://xmlns.eia.com/EO/common/Common/1.0" xmlns:ns5="http://xmlns.eia.com/EO/Standard/External/ISO/Language/639-3/2007/Language" xmlns:ns6="http://xmlns.eia.com/EO/Standard/External/ISO/Country/3166-1/2006/Country" xmlns:ns7="http://xmlns.eia.com/EO/Standard/External/ISO/Currency/4217/2001/Currency" xmlns:ns8="http://xmlns.eia.com/EO/common/Header/1.0" xmlns:ns9="http://nucor.eia.com/AO/Ebiz/D2S/ItemAttributeAO/1.0" xmlns:oracle-xsl-mapper="http://www.oracle.com/xsl/mapper/schemas" xmlns:oraext="http://www.oracle.com/XSL/Transform/java/oracle.tip.pc.services.functions.ExtFunc" xmlns:oraxsl="http://www.oracle.com/XSL/Transform/java" xmlns:pc="http://xmlns.oracle.com/pcbpel/" xmlns:plt="http://schemas.xmlsoap.org/ws/2003/05/partner-link/" xmlns:socket="http://www.oracle.com/XSL/Transform/java/oracle.tip.adapter.socket.ProtocolTranslator" xmlns:tns="http://xmlns.oracle.com/pcbpel/adapter/db/top/DB_Insert_API_PRODUCT_CODE" xmlns:utl="http://www.oracle.com/XSL/Transform/java/com.eia.soa.util.Configuration" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" xmlns:xp20="http://www.oracle.com/XSL/Transform/java/oracle.tip.pc.services.functions.Xpath20" xmlns:xref="http://www.oracle.com/XSL/Transform/java/oracle.tip.xref.xpath.XRefXPathFunctions" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
  <oracle-xsl-mapper:schema>
    <!--SPECIFICATION OF MAP SOURCES AND TARGETS, DO NOT MODIFY.-->
    <oracle-xsl-mapper:mapSources>
      <oracle-xsl-mapper:source type="WSDL">
        <oracle-xsl-mapper:schema location="../WSDLs/JMS_DEQ_NextGenDistributedTopic.wsdl"/>
        <oracle-xsl-mapper:rootElement name="ItemAttributeAddRq" namespace="http://nucor.eia.com/AO/Ebiz/D2S/ItemAttributeAM/1.0"/>
      </oracle-xsl-mapper:source>
      <oracle-xsl-mapper:source type="WSDL">
        <oracle-xsl-mapper:schema location="../WSDLs/JMS_DEQ_NextGenDistributedTopic.wsdl"/>
        <oracle-xsl-mapper:rootElement name="parameters" namespace="http://schemas.oracle.com/service/bpel/common"/>
        <oracle-xsl-mapper:param name="paramVar"/>
      </oracle-xsl-mapper:source>
    </oracle-xsl-mapper:mapSources>
    <oracle-xsl-mapper:mapTargets>
      <oracle-xsl-mapper:target type="WSDL">
        <oracle-xsl-mapper:schema location="../WSDLs/DB_Insert_API_PRODUCT_CODE.wsdl"/>
        <oracle-xsl-mapper:rootElement name="ApiProductCodeCollection" namespace="http://xmlns.oracle.com/pcbpel/adapter/db/top/DB_Insert_API_PRODUCT_CODE"/>
      </oracle-xsl-mapper:target>
    </oracle-xsl-mapper:mapTargets>
    <!--GENERATED BY ORACLE XSL MAPPER 12.1.3.0.0(XSLT Build 140529.0700.0211) AT [TUE JUL 26 21:42:34 IST 2016].-->
  </oracle-xsl-mapper:schema>
  <!--User Editing allowed BELOW this line - DO NOT DELETE THIS LINE-->
  <xsl:param name="paramVar"/>
  <xsl:template match="/">
    <tns:ApiProductCodeCollection>
      <xsl:for-each select="/ns0:ItemAttributeAddRq/ns9:ItemAttributeDetails">
        <xsl:if test="dvm:lookupValue (&quot;oramds:/apps/EIAMetadata/CommonArtifacts/dvm/EBS_QMOS_NSNE_ITEM_TYPE_MAP.dvm&quot;, &quot;ITEMTYPE&quot;, ns9:UserItemType, &quot;BILLET&quot;, &quot;&quot; ) = &quot;Y&quot;">
          <tns:ApiProductCode>
            <tns:id>
              <xsl:value-of select="oraext:sequence-next-val (&quot;SEQ_API_PRODUCT_CODE_ID&quot;, &quot;jdbc/nsneqmos1&quot; )"/>
            </tns:id>
            <tns:prodCode>
              <xsl:value-of select="ns9:ItemNumber"/>
            </tns:prodCode>
<<<<<<< .mine
            <xsl:variable name="varProdShape" select="ns9:UDADetails/ns9:UDADetails[(ns9:AttrName='SHAPE')]/ns9:AttrValue"/>
||||||| .r15237
=======
            <xsl:variable name="varProdShape"
                          select="ns9:UDADetails/ns9:UDADetails[(ns9:AttrName='SHAPE')]/ns9:AttrValue"/>
>>>>>>> .r18216
            <tns:prodShape>
<<<<<<< .mine
              <xsl:value-of select="$varProdShape"/>
||||||| .r15237
              <xsl:value-of select="ns9:UDADetails/ns9:UDADetails[(ns9:AttrName='SHAPE')]/ns9:AttrValue"/>
=======
              <xsl:value-of select="$varProdShape"/>
            </tns:prodShape>
            <!-- <tns:prodShape>
              <xsl:value-of select="ns9:UDADetails/ns9:UDADetails[(ns9:AttrName='SHAPE')]/ns9:AttrValue"/>
>>>>>>> .r18216
            </tns:prodShape>  -->
            <tns:prodGroup>
              <xsl:value-of select="ns9:ProdGroup"/>
            </tns:prodGroup>
            <tns:prodClass>
              <xsl:value-of select="dvm:lookupValue (&quot;oramds:/apps/EIAMetadata/CommonArtifacts/dvm/EBS_QMOS_PRODUCT_CLASS_MAP.dvm&quot;, &quot;PRODUCT_TYPE_VALUES&quot;, ns9:UDADetails/ns9:UDADetails[(ns9:AttrName=&quot;PRODTYPE&quot;)]/ns9:AttrValue, &quot;PRODUCT_CLASS&quot;, &quot;0&quot; )"/>
            </tns:prodClass>
            <xsl:choose>
              <xsl:when test="ns9:CategoryDetails/ns9:CategoryDetails[1]/ns9:Segment19">
<<<<<<< .mine
                <xsl:choose>
                  <xsl:when test="string-length(ns9:CategoryDetails/ns9:CategoryDetails[1]/ns9:Segment19) &gt;25 ">
                    <tns:prodSize>
                      <xsl:value-of select="translate(  translate(  ns9:CategoryDetails/ns9:CategoryDetails[1]/ns9:Segment19, '&quot;', &quot;&quot; ) , ' ', &quot;&quot; )"/>
                    </tns:prodSize>
                  </xsl:when>
                  <xsl:otherwise>
                    <tns:prodSize>
                      <xsl:value-of select="ns9:CategoryDetails/ns9:CategoryDetails[1]/ns9:Segment19"/>
                    </tns:prodSize>
                  </xsl:otherwise>
                </xsl:choose>
||||||| .r15237
				<xsl:choose>
					<xsl:when test="string-length(ns9:CategoryDetails/ns9:CategoryDetails[1]/ns9:Segment19) > 25 ">
						<tns:prodSize>
						  <xsl:value-of select="translate(  translate(  ns9:CategoryDetails/ns9:CategoryDetails[1]/ns9:Segment19, '&quot;', &quot;&quot; ) , ' ', &quot;&quot; )"/>
						</tns:prodSize>
					</xsl:when>
					<xsl:otherwise>
						<tns:prodSize>
						  <xsl:value-of select="ns9:CategoryDetails/ns9:CategoryDetails[1]/ns9:Segment19"/>
						</tns:prodSize>
					</xsl:otherwise>
				</xsl:choose>
=======
                <xsl:choose>
                  <xsl:when test="string-length(ns9:CategoryDetails/ns9:CategoryDetails[1]/ns9:Segment19) > 25 ">
                    <tns:prodSize>
                      <xsl:value-of select="translate(  translate(  ns9:CategoryDetails/ns9:CategoryDetails[1]/ns9:Segment19, '&quot;', &quot;&quot; ) , ' ', &quot;&quot; )"/>
                    </tns:prodSize>
                  </xsl:when>
                  <xsl:otherwise>
                    <tns:prodSize>
                      <xsl:value-of select="ns9:CategoryDetails/ns9:CategoryDetails[1]/ns9:Segment19"/>
                    </tns:prodSize>
                  </xsl:otherwise>
                </xsl:choose>
>>>>>>> .r18216
              </xsl:when>
              <xsl:otherwise>
<<<<<<< .mine
                <xsl:choose>
                  <xsl:when test="string-length(ns9:UDADetails/ns9:UDADetails[(ns9:AttrName=&quot;SIZE&quot;)]/ns9:AttrValue) &gt;25 ">
                    <tns:prodSize>
                      <xsl:value-of select="translate(  translate(  ns9:UDADetails/ns9:UDADetails[(ns9:AttrName=&quot;SIZE&quot;)]/ns9:AttrValue, '&quot;', &quot;&quot; ) , ' ', &quot;&quot; )"/>
                    </tns:prodSize>
                  </xsl:when>
                  <xsl:otherwise>
                    <tns:prodSize>
                      <xsl:value-of select="ns9:UDADetails/ns9:UDADetails[(ns9:AttrName=&quot;SIZE&quot;)]/ns9:AttrValue"/>
                    </tns:prodSize>
                  </xsl:otherwise>
                </xsl:choose>
||||||| .r15237
				<xsl:choose>
				  <xsl:when test="string-length(ns9:UDADetails/ns9:UDADetails[(ns9:AttrName=&quot;SIZE&quot;)]/ns9:AttrValue) > 25 ">
					<tns:prodSize>
					  <xsl:value-of select="translate(  translate(  ns9:UDADetails/ns9:UDADetails[(ns9:AttrName=&quot;SIZE&quot;)]/ns9:AttrValue, '&quot;', &quot;&quot; ) , ' ', &quot;&quot; )"/>
					</tns:prodSize>
				  </xsl:when>
					<xsl:otherwise>
					<tns:prodSize>
					  <xsl:value-of select="ns9:UDADetails/ns9:UDADetails[(ns9:AttrName=&quot;SIZE&quot;)]/ns9:AttrValue"/>
					</tns:prodSize>
				  </xsl:otherwise>
				</xsl:choose>
=======
                <xsl:choose>
                  <xsl:when test='string-length(ns9:UDADetails/ns9:UDADetails[(ns9:AttrName="SIZE")]/ns9:AttrValue) > 25 '>
                    <tns:prodSize>
                      <xsl:value-of select="translate(  translate(  ns9:UDADetails/ns9:UDADetails[(ns9:AttrName=&quot;SIZE&quot;)]/ns9:AttrValue, '&quot;', &quot;&quot; ) , ' ', &quot;&quot; )"/>
                    </tns:prodSize>
                  </xsl:when>
                  <xsl:otherwise>
                    <tns:prodSize>
                      <xsl:value-of select='ns9:UDADetails/ns9:UDADetails[(ns9:AttrName="SIZE")]/ns9:AttrValue'/>
                    </tns:prodSize>
                  </xsl:otherwise>
                </xsl:choose>
>>>>>>> .r18216
              </xsl:otherwise>
            </xsl:choose>
            <xsl:choose>
              <xsl:when test="string-length (ns9:ItemDescription ) &lt; 30">
                <tns:prodName>
                  <xsl:value-of select="ns9:ItemDescription"/>
                </tns:prodName>
              </xsl:when>
              <xsl:otherwise>
                <tns:prodName>
                  <xsl:value-of select="substring (ns9:ItemDescription, 1, 30)"/>
                </tns:prodName>
              </xsl:otherwise>
            </xsl:choose>
            <tns:gradeId>
              <xsl:value-of select="dvm:lookupValue (&quot;oramds:/apps/EIAMetadata/CommonArtifacts/dvm/EBS_QMOS_NSNE_GRADE_ID_MAP.dvm&quot;, &quot;EBS&quot;, ns9:UDADetails/ns9:UDADetails[(ns9:AttrName = &quot;GRADE&quot;)]/ns9:AttrValue, &quot;QMOS&quot;, ns9:UDADetails/ns9:UDADetails[(ns9:AttrName = &quot;GRADE&quot;)]/ns9:AttrValue )"/>
              <!--xsl:value-of select="ns9:UDADetails/ns9:UDADetails[(ns9:AttrName='GRADE')]/ns9:AttrValue"/-->
            </tns:gradeId>
            <xsl:choose>
              <xsl:when test="ns9:CategoryDetails/ns9:CategoryDetails[1]/ns9:Segment4 = 'COIL'">
                <tns:cutLength>0</tns:cutLength>
              </xsl:when>
              <xsl:otherwise>
                <tns:cutLength>
                  <xsl:value-of select="ns9:CategoryDetails/ns9:CategoryDetails[1]/ns9:Segment4"/>
                </tns:cutLength>
              </xsl:otherwise>
            </xsl:choose>
<<<<<<< .mine
            <xsl:variable name="varBundleType">
              <xsl:choose>
                <xsl:when test="(ns9:UDADetails/ns9:UDADetails[(ns9:AttrName=&quot;LENGTH&quot;)]/ns9:AttrValue) = &quot;COIL&quot;">
                  <xsl:value-of select="'C'"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:value-of select="ns9:BundleType"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <tns:bundleType>
              <xsl:value-of select="$varBundleType"/>
            </tns:bundleType>
||||||| .r15237
=======
            <xsl:variable name="varBundleType">
              <xsl:choose>
                <xsl:when test='(ns9:UDADetails/ns9:UDADetails[(ns9:AttrName="LENGTH")]/ns9:AttrValue) = "COIL"'>
                  <xsl:value-of select="'C'"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:value-of select="ns9:BundleType"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <tns:bundleType>
              <xsl:value-of select="$varBundleType"/>
            </tns:bundleType>
>>>>>>> .r18216
            <xsl:choose>
<<<<<<< .mine
              <xsl:when test="ns9:ProdType='BIL'"> <!-- If Prod type is billet -->
                <tns:theoActual>
                  <xsl:value-of select="'T'"/>
                </tns:theoActual>
||||||| .r15237
              <xsl:when test='(ns9:UDADetails/ns9:UDADetails[(ns9:AttrName="LENGTH")]/ns9:AttrValue) = "COIL"'>
                <tns:bundleType>C</tns:bundleType>
=======
              <xsl:when test="ns9:ProdType='BIL'">
                <!-- If Prod type is billet -->
                <tns:theoActual>
                  <xsl:value-of select="'T'"/>
                </tns:theoActual>
>>>>>>> .r18216
              </xsl:when>
              <xsl:otherwise>
<<<<<<< .mine
                <xsl:choose>
                  <xsl:when test="$varBundleType='C'"> <!-- Else If Bundle type is Coil -->
                    <tns:theoActual>
                      <xsl:value-of select="'A'"/>
                    </tns:theoActual>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:choose>
                      <xsl:when test="$varProdShape='RD'"> <!-- If not coil and Shape is RD -->
                        <tns:theoActual>
                          <xsl:value-of select="'A'"/>
                        </tns:theoActual>
                      </xsl:when>
                      <xsl:otherwise>
                        <tns:theoActual>
                          <xsl:value-of select="'T'"/> <!-- Otherwise -->
                        </tns:theoActual>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:otherwise>
                </xsl:choose>
||||||| .r15237
                <tns:bundleType>
                  <xsl:value-of select="ns9:BundleType"/>
                </tns:bundleType>
=======
                <xsl:choose>
                  <xsl:when test="$varBundleType='C'">
                    <!-- Else If Bundle type is Coil -->
                    <tns:theoActual>
                      <xsl:value-of select="'A'"/>
                    </tns:theoActual>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:choose>
                      <xsl:when test="$varProdShape='RD'">
                        <!-- If not coil and Shape is RD -->
                        <tns:theoActual>
                          <xsl:value-of select="'A'"/>
                        </tns:theoActual>
                      </xsl:when>
                      <xsl:otherwise>
                        <tns:theoActual>
                          <xsl:value-of select="'T'"/>
                          <!-- Otherwise -->
                        </tns:theoActual>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:otherwise>
                </xsl:choose>
>>>>>>> .r18216
              </xsl:otherwise>
            </xsl:choose>
<<<<<<< .mine
            <tns:metricImperial>
||||||| .r15237
            <tns:theoActual>
              <xsl:value-of select="ns9:TheoActual"/>
            </tns:theoActual>
            <tns:metricImperial>
=======
             <tns:metricImperial>
>>>>>>> .r18216
              <xsl:value-of select="ns9:MetricImperial"/>
            </tns:metricImperial>
            <tns:lastError>
              <xsl:value-of select="ns9:LastError"/>
            </tns:lastError>
            <tns:prodType>
              <xsl:value-of select="ns9:ProdType"/>
            </tns:prodType>
            <xsl:choose>
              <xsl:when test="string-length (ns9:ItemDescription ) &lt;= 25">
                <tns:partDesc1>
                  <xsl:value-of select="ns9:ItemDescription"/>
                </tns:partDesc1>
              </xsl:when>
              <xsl:otherwise>
                <tns:partDesc1>
                  <xsl:value-of select="substring (ns9:ItemDescription, 1, 25 )"/>
                </tns:partDesc1>
              </xsl:otherwise>
            </xsl:choose>
            <xsl:choose>
              <xsl:when test="string-length (ns9:ItemLongDescription ) &lt;= 25">
                <tns:partDesc2>
                  <xsl:value-of select="ns9:ItemLongDescription"/>
                </tns:partDesc2>
              </xsl:when>
              <xsl:otherwise>
                <tns:partDesc2>
                  <xsl:value-of select="substring (ns9:ItemLongDescription, 1, 25 )"/>
                </tns:partDesc2>
              </xsl:otherwise>
            </xsl:choose>
            <xsl:choose>
              <xsl:when test="ns9:ProdType = &quot;BIL&quot;">
                <tns:bundlePieces>1</tns:bundlePieces>
              </xsl:when>
              <xsl:otherwise>
                <xsl:choose>
                  <xsl:when test="ns9:ProdType = &quot;FG&quot;">
                    <xsl:choose>
                      <xsl:when test="(ns9:UDADetails/ns9:UDADetails[(ns9:AttrName=&quot;LENGTH&quot;)]/ns9:AttrValue) = &quot;COIL&quot;">
                        <tns:bundlePieces>1</tns:bundlePieces>
                      </xsl:when>
                      <xsl:otherwise>
                        <tns:bundlePieces>
                          <xsl:value-of select="ns9:BundlePieces"/>
                        </tns:bundlePieces>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:when>
                </xsl:choose>
              </xsl:otherwise>
            </xsl:choose>
            <xsl:choose>
              <xsl:when test="xp20:compare (ns9:ProdType, 'BIL' ) = 0">
                <tns:bundleWeight>
                  <!--xsl:value-of select="ns9:BundleWeight"/-->
                  <xsl:value-of select="oraext:query-database (concat (&quot;SELECT  inv_convert.inv_um_convert_new (&quot;, ns9:InventoryItemId, &quot;,null,&quot;, ns9:OrganizationId, &quot;,null,&quot;, &quot;1,'EA','LBS',null,null, 'W') result from dual&quot; ), false ( ), false ( ), &quot;jdbc/ebsapps&quot; )"/>
                </tns:bundleWeight>
              </xsl:when>
              <xsl:otherwise>
                <xsl:choose>
                  <xsl:when test="xp20:compare (ns9:ProdType, 'FG' ) = 0">
                    <xsl:choose>
                      <xsl:when test="dvm:lookupValue (&quot;oramds:/apps/EIAMetadata/CommonArtifacts/dvm/EBS_QMOS_PRODUCT_CLASS_MAP.dvm&quot;, &quot;PRODUCT_TYPE_VALUES&quot;, ns9:UDADetails/ns9:UDADetails[(ns9:AttrName=&quot;PRODTYPE&quot;)]/ns9:AttrValue, &quot;PRODUCT_CLASS&quot;, &quot;0&quot; ) = 6">
                        <tns:bundleWeight>
                          <xsl:value-of select="ns9:CategoryDetails/ns9:CategoryDetails/ns9:Segment20"/>
                        </tns:bundleWeight>
                      </xsl:when>
                      <xsl:otherwise>
                        <!-- Def#1939 -->
                        <tns:bundleWeight>
                          <xsl:value-of select="ns9:BundleWeight"/>
                        </tns:bundleWeight>
                        <!--
                        <xsl:for-each select="ns9:UDADetails/ns9:UDADetails"><xsl:if test="(xp20:compare (ns9:AttrName, 'BNDL_WEIGHT_MAX' ) = 0)"><tns:bundleWeight><xsl:value-of select="ns9:AttrValue"/></tns:bundleWeight></xsl:if></xsl:for-each>End Def#1939 -->
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:when>
                </xsl:choose>
              </xsl:otherwise>
            </xsl:choose>
            <tns:parentBilletProdCode>
              <xsl:value-of select="ns9:ParentBilletProdCode"/>
            </tns:parentBilletProdCode>
            <tns:specCode/>
            <tns:createDate>
              <xsl:value-of select="xp20:current-date ( )"/>
            </tns:createDate>
            <tns:userId>SOAUSER</tns:userId>
            <tns:processed>N</tns:processed>
            <tns:meltPractice>
              <xsl:value-of select="ns9:MeltPractice"/>
            </tns:meltPractice>
          </tns:ApiProductCode>
        </xsl:if>
      </xsl:for-each>
    </tns:ApiProductCodeCollection>
  </xsl:template>
</xsl:stylesheet>