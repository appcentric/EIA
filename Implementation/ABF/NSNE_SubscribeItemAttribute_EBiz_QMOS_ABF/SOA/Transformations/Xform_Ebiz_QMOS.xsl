<?xml version="1.0" encoding="UTF-8" ?>
<xsl:stylesheet version="1.0"
                xmlns:xp20="http://www.oracle.com/XSL/Transform/java/oracle.tip.pc.services.functions.Xpath20"
                xmlns:oraxsl="http://www.oracle.com/XSL/Transform/java"
                xmlns:mhdr="http://www.oracle.com/XSL/Transform/java/oracle.tip.mediator.service.common.functions.MediatorExtnFunction"
                xmlns:ns1="http://nucor.eia.com/common"
                xmlns:oraext="http://www.oracle.com/XSL/Transform/java/oracle.tip.pc.services.functions.ExtFunc"
                xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                xmlns:oracle-xsl-mapper="http://www.oracle.com/xsl/mapper/schemas"
                xmlns:dvm="http://www.oracle.com/XSL/Transform/java/oracle.tip.dvm.LookupValue"
                xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                xmlns:ns0="http://nucor.eia.com/AO/Ebiz/D2S/ItemAttributeAM/1.0"
                xmlns:xref="http://www.oracle.com/XSL/Transform/java/oracle.tip.xref.xpath.XRefXPathFunctions"
                xmlns:tns="http://xmlns.oracle.com/pcbpel/adapter/db/top/DB_Insert_API_PRODUCT_CODE"
                xmlns:xsd="http://www.w3.org/2001/XMLSchema"
                xmlns:utl="http://www.oracle.com/XSL/Transform/java/com.eia.soa.util.Configuration"
                xmlns:socket="http://www.oracle.com/XSL/Transform/java/oracle.tip.adapter.socket.ProtocolTranslator"
                exclude-result-prefixes="xsi oracle-xsl-mapper xsl xsd ns1 ns0 tns xp20 oraxsl mhdr oraext dvm xref utl socket"
                xmlns:pc="http://xmlns.oracle.com/pcbpel/"
                xmlns:plt="http://schemas.xmlsoap.org/ws/2003/05/partner-link/"
                xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" xmlns:ns3="http://xmlns.eia.com/EO/common/Common/1.0"
                xmlns:ns2="http://xmlns.oracle.com/pcbpel/adapter/jms/I114/NSNE_SubscribeItemAttribute_EBiz_QMOS_ABF/JMS_DEQ_NextGenDistributedTopic"
                xmlns:ns5="http://xmlns.eia.com/EO/Standard/External/ISO/Country/3166-1/2006/Country"
                xmlns:ns7="http://xmlns.eia.com/EO/common/Header/1.0"
                xmlns:jca="http://xmlns.oracle.com/pcbpel/wsdl/jca/"
                xmlns:ns4="http://xmlns.eia.com/EO/Standard/External/ISO/Language/639-3/2007/Language"
                xmlns:ns6="http://xmlns.eia.com/EO/Standard/External/ISO/Currency/4217/2001/Currency"
                xmlns:ns8="http://nucor.eia.com/AO/Ebiz/D2S/ItemAttributeAO/1.0"
                xmlns:ns9="http://xmlns.oracle.com/pcbpel/adapter/db/I114/NSNE_SubscribeItemAttribute_EBiz_QMOS_ABF/DB_Insert_API_PRODUCT_CODE"
                xmlns:ns10="http://schemas.oracle.com/service/bpel/common">
  <oracle-xsl-mapper:schema>
    <!--SPECIFICATION OF MAP SOURCES AND TARGETS, DO NOT MODIFY.-->
    <oracle-xsl-mapper:mapSources>
      <oracle-xsl-mapper:source type="WSDL">
        <oracle-xsl-mapper:schema location="../WSDLs/JMS_DEQ_NextGenDistributedTopic.wsdl"/>
        <oracle-xsl-mapper:rootElement name="ItemAttributeAddRq"
                                       namespace="http://nucor.eia.com/AO/Ebiz/D2S/ItemAttributeAM/1.0"/>
      </oracle-xsl-mapper:source>
      <oracle-xsl-mapper:source type="WSDL">
        <oracle-xsl-mapper:schema location="../WSDLs/JMS_DEQ_NextGenDistributedTopic.wsdl"/>
        <oracle-xsl-mapper:rootElement name="parameters" namespace="http://schemas.oracle.com/service/bpel/common"/>
        <oracle-xsl-mapper:param name="paramVar"/>
      </oracle-xsl-mapper:source>
    </oracle-xsl-mapper:mapSources>
    <oracle-xsl-mapper:mapTargets>
      <oracle-xsl-mapper:target type="WSDL">
        <oracle-xsl-mapper:schema location="../WSDLs/DB_Insert_API_PRODUCT_CODE.wsdl"/>
        <oracle-xsl-mapper:rootElement name="ApiProductCodeCollection"
                                       namespace="http://xmlns.oracle.com/pcbpel/adapter/db/top/DB_Insert_API_PRODUCT_CODE"/>
      </oracle-xsl-mapper:target>
    </oracle-xsl-mapper:mapTargets>
    <!--GENERATED BY ORACLE XSL MAPPER 12.1.3.0.0(XSLT Build 140529.0700.0211) AT [TUE FEB 02 08:45:22 CST 2016].-->
  </oracle-xsl-mapper:schema>
  <!--User Editing allowed BELOW this line - DO NOT DELETE THIS LINE-->
  <xsl:param name="paramVar"/>
  <xsl:template match="/">
    <tns:ApiProductCodeCollection>
      <xsl:for-each select="/ns0:ItemAttributeAddRq/ns8:ItemAttributeDetails">
        <tns:ApiProductCode>
          <tns:id>
            <xsl:value-of select='oraext:sequence-next-val ("SEQ_API_PRODUCT_CODE_ID", $paramVar/ns10:parameters/ns10:item[(ns10:name = "JDBCName")]/ns10:value )'/>
          </tns:id>
          <tns:prodCode>
            <xsl:value-of select="ns8:ItemNumber"/>
          </tns:prodCode>
          <tns:prodShape>
            <xsl:value-of select="ns8:UDADetails/ns8:UDADetails[(ns8:AttrName='SHAPE')]/ns8:AttrValue"/>
          </tns:prodShape>
          <tns:prodGroup>
            <xsl:value-of select="ns8:ProdGroup"/>
          </tns:prodGroup>
          <tns:prodClass>
            <xsl:value-of select='dvm:lookupValue ("oramds:/apps/EIAMetadata/CommonArtifacts/dvm/EBS_QMOS_PRODUCT_CLASS_MAP.dvm", "PRODUCT_TYPE_VALUES", ns8:UDADetails/ns8:UDADetails[(ns8:AttrName="PRODTYPE")]/ns8:AttrValue, "PRODUCT_CLASS", "0" )'/>
          </tns:prodClass>
          <xsl:choose>
            <xsl:when test="ns8:CategoryDetails/ns8:CategoryDetails[1]/ns8:Segment19">
              <tns:prodSize>
                <xsl:value-of select="ns8:CategoryDetails/ns8:CategoryDetails[1]/ns8:Segment19"/>
              </tns:prodSize>
            </xsl:when>
            <xsl:otherwise>
              <tns:prodSize>
                <xsl:value-of select='ns8:UDADetails/ns8:UDADetails[(ns8:AttrName="SIZE")]/ns8:AttrValue'/>
              </tns:prodSize>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:choose>
            <xsl:when test="string-length (ns8:ItemDescription ) &lt; 30">
              <tns:prodName>
                <xsl:value-of select="ns8:ItemDescription"/>
              </tns:prodName>
            </xsl:when>
            <xsl:otherwise>
              <tns:prodName>
                <xsl:value-of select="substring (ns8:ItemDescription, 1, 30)"/>
              </tns:prodName>
            </xsl:otherwise>
          </xsl:choose>
          <tns:gradeId>
            <xsl:value-of select="ns8:UDADetails/ns8:UDADetails[(ns8:AttrName='GRADE')]/ns8:AttrValue"/>
          </tns:gradeId>
          <xsl:choose>
            <xsl:when test="ns8:CategoryDetails/ns8:CategoryDetails[1]/ns8:Segment4 = 'COIL'">
              <tns:cutLength>0</tns:cutLength>
            </xsl:when>
            <xsl:otherwise>
              <tns:cutLength>
                <xsl:value-of select="ns8:CategoryDetails/ns8:CategoryDetails[1]/ns8:Segment4"/>
              </tns:cutLength>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:choose>
            <xsl:when test='(ns8:UDADetails/ns8:UDADetails[(ns8:AttrName="LENGTH")]/ns8:AttrValue) = "COIL"'>
              <tns:bundleType>C</tns:bundleType>
            </xsl:when>
            <xsl:otherwise>
              <tns:bundleType>
                <xsl:value-of select="ns8:BundleType"/>
              </tns:bundleType>
            </xsl:otherwise>
          </xsl:choose>
          <tns:theoActual>
            <xsl:value-of select="ns8:TheoActual"/>
          </tns:theoActual>
          <tns:metricImperial>
            <xsl:value-of select="ns8:MetricImperial"/>
          </tns:metricImperial>
          <tns:lastError>
            <xsl:value-of select="ns8:LastError"/>
          </tns:lastError>
          <tns:prodType>
            <xsl:value-of select="ns8:ProdType"/>
          </tns:prodType>
          <xsl:choose>
            <xsl:when test="string-length (ns8:ItemDescription ) &lt;= 25">
              <tns:partDesc1>
                <xsl:value-of select="ns8:ItemDescription"/>
              </tns:partDesc1>
            </xsl:when>
            <xsl:otherwise>
              <tns:partDesc1>
                <xsl:value-of select="substring (ns8:ItemDescription, 1, 25 )"/>
              </tns:partDesc1>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:choose>
            <xsl:when test="string-length (ns8:ItemLongDescription ) &lt;= 25">
              <tns:partDesc2>
                <xsl:value-of select="ns8:ItemLongDescription"/>
              </tns:partDesc2>
            </xsl:when>
            <xsl:otherwise>
              <tns:partDesc2>
                <xsl:value-of select="substring (ns8:ItemLongDescription, 1, 25 )"/>
              </tns:partDesc2>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:choose>
            <xsl:when test='ns8:ProdType = "BIL"'>
              <tns:bundlePieces>1</tns:bundlePieces>
            </xsl:when>
            <xsl:otherwise>
              <xsl:choose>
                <xsl:when test='ns8:ProdType = "FG"'>
                  <xsl:choose>
                    <xsl:when test='(ns8:UDADetails/ns8:UDADetails[(ns8:AttrName="LENGTH")]/ns8:AttrValue) = "COIL"'>
                      <tns:bundlePieces>1</tns:bundlePieces>
                    </xsl:when>
                    <xsl:otherwise>
                      <tns:bundlePieces>
                        <xsl:value-of select="ns8:BundlePieces"/>
                      </tns:bundlePieces>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:when>
              </xsl:choose>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:choose>
            <xsl:when test="xp20:compare (ns8:ProdType, 'BIL' ) = 0">
              <tns:bundleWeight>
                <!--xsl:value-of select="ns8:BundleWeight"/-->
                <xsl:value-of select="oraext:query-database (concat (&quot;SELECT  inv_convert.inv_um_convert_new (&quot;, ns8:InventoryItemId, &quot;,null,&quot;, ns8:OrganizationId, &quot;,null,&quot;, &quot;1,'EA','LBS',null,null, 'W') result from dual&quot; ), false ( ), false ( ), &quot;jdbc/ebsapps&quot; )"/>
              </tns:bundleWeight>
            </xsl:when>
            <xsl:otherwise>
              <xsl:choose>
                <xsl:when test="xp20:compare (ns8:ProdType, 'FG' ) = 0">
                  <xsl:choose>
                    <xsl:when test='dvm:lookupValue ("oramds:/apps/EIAMetadata/CommonArtifacts/dvm/EBS_QMOS_PRODUCT_CLASS_MAP.dvm", "PRODUCT_TYPE_VALUES", ns8:UDADetails/ns8:UDADetails[(ns8:AttrName="PRODTYPE")]/ns8:AttrValue, "PRODUCT_CLASS", "0" ) = 6'>
                      <tns:bundleWeight>
                        <xsl:value-of select="ns8:CategoryDetails/ns8:CategoryDetails/ns8:Segment20"/>
                      </tns:bundleWeight>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:for-each select="ns8:UDADetails/ns8:UDADetails">
                        <xsl:if test="(xp20:compare (ns8:AttrName, 'BNDL_WEIGHT_MAX' ) = 0)">
                          <tns:bundleWeight>
                            <xsl:value-of select="ns8:AttrValue"/>
                          </tns:bundleWeight>
                        </xsl:if>
                      </xsl:for-each>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:when>
              </xsl:choose>
            </xsl:otherwise>
          </xsl:choose>
          <tns:parentBilletProdCode>
            <xsl:value-of select="ns8:ParentBilletProdCode"/>
          </tns:parentBilletProdCode>
          <tns:specCode/>
          <tns:createDate>
            <xsl:value-of select="xp20:current-date ( )"/>
          </tns:createDate>
          <tns:userId>SOAUSER</tns:userId>
          <tns:processed>N</tns:processed>
          <tns:meltPractice>
            <xsl:value-of select="ns8:MeltPractice"/>
          </tns:meltPractice>
        </tns:ApiProductCode>
      </xsl:for-each>
    </tns:ApiProductCodeCollection>
  </xsl:template>
</xsl:stylesheet>